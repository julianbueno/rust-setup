struct User {
    username: String,
    email: String,
    uri: String,
    active: bool,
}

impl User {
    fn new(username: String, email: String, uri: String) -> Self {
        Self {
            username,
            email,
            uri,
            active: true,
        }
    }
    fn deactivate(&mut self) {
        self.active = false;
    }

    // fn extract_username(email: &str) -> Option<&str> {
    //     email.split_once('@').map(|(username, _)| username)
    // }

//Modify the code to add another associated function to the `User` struct, named `from_email`, 
//which takes an email address as a parameter and returns a new `User` instance with a username 
//derived from the email address. For example, if the email is "john@example.com", the username 
//for the new user should be "john". Print the debug representation of the new user instance to verify your changes.
    fn from_email(email: &str) -> User {
        let username = email.split_once('@')
            .map(|(username, _)| username)
            .unwrap_or(email);
        let new_user = User::new(
         username.to_string(),
         email.to_string(),
         String::from("www.new.com")     
        );
       new_user
   }

    fn update_uri(&mut self, new_uri: String ){
        self.uri = new_uri;
    }

    
}

fn main() {
    let mut new_user = User::new(
        String::from("alfredodeza"),
        String::from("alfreodeza@example.com"),
        String::from("https://alfredodeza.com"),
    );
    println!("Hello, {}!", new_user.username);
    println!("Account {} status is: {}", new_user.username, new_user.active);
    println!("Old URL, {}!", new_user.uri);
    new_user.deactivate();
    new_user.update_uri(String::from("www.google.com"));
    println!("New URL, {}!", new_user.uri);
    println!("Account {} status is: {}", new_user.username, new_user.active);

    let another_user = User::from_email("john@example.com");
    println!("Hello, {}!", another_user.username);